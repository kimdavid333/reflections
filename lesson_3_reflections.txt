Question: When would you want to create a remote repository rather than keeping all your work local?

Creating a remote repository would allow one to share and collaborate his/her works with public. 
The shortcoming of keeping all your work local is that although it is still great to work on a big project
alone, local repository does not have proper services to allow a user to share work with public.

================================================================================
Question: Why might you want to always pull changes manually rather than having
Git automatically stay up-to-date with your remote repository?

	Contrast to working on local computer, GitHub typically is used to share codes
with public or to collaborate with other members. As a result, it's very natural for
users to be very careful on what to post on his/her remote repository. For this
very reason, making Git manually pull changes is much more desirable than
automatically stay up-to-date with one's remote repository.
	For instance, suppose you are working on a large project with many contributors,
and you and your friends are working on a side branch to add a new feature to
the program. If Git automatically synchronize its remote repository with your
not-yet-ready-to-share codes, everyone would be able to see your sub-optimal
code. More importantly, your new feature branch could be a mess if all the
changes from other contributors get updated automatically, and therefore causing
unpredictable codes.

================================================================================
Question: Describe the differences between forks, clones, and branches. When
would you use one instead of another?

    Branches are simply labels of commits. They are used for many reasons; they
are used for reachability purpose and to provide easy way to refer to commits
for git operations like git diff and merge.
    Clones are used to allow users to copy repositories to their local machines
to allow easy editing and testing their files. When git clones are used,
repositories' metadata are copied to the working directories.
    Lastly, forks are used in order to clone repositories within GitHub. The
mechanics behind forks are very similar to clones without need for users to copy
files to their local machine. Benefits of forks over clones include: 1) Give
credibility to original author 2) Original work remain unaffected.

================================================================================
Question: What is the benefit of having a copy of the last known state of the
remote stored locally?

By storing last known state of remote branch, Git can determine whether or not
files need to be merged or can be done by fast-forward merging. In addition, the
local copy enable users to work offline without worrying about merging process
later on. Lastly, keeping track of last state of remote branch enable
distinction between your work from work from others, and thus providing a
reference during the merging process.

================================================================================
Question: How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?
    
I would have collaborated with sending my worked code to collaborators. Easier
part would be editing and saving changes since I do not have to worry about
adding to staging area, committing and pulling/pushing to GitHub. However,
harder part would be tracking changes made by others, reverting changes
even I made, and locating bugs made by others. Overall, the downfall of
not using Git or GitHub is so much greater than time and effort saved by
not using it. 

================================================================================
Question: When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

You would want to work on a separate branch when you are working on a big
project with many collaborators whom have not yet able to see the changes you
have made. That is, the nature of big project requires everyone to be on the
same boat in order to keep the project consistent with the groups objective.
Thus, it is dangerous practice to directly work on master branch which everyone
is relying to add new features.


